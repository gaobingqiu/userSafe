<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx.xsd  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context.xsd">  
  
    <!-- 加载properties配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:jdbc.properties</value>  
            </list>  
        </property>  
    </bean>  
  
    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource">  
    <!-- 配置连接数 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置单个连接最长等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 间隔10分钟检查所有连接是否需要关闭或创建 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置最小生存的时间：5分钟 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters，监控界面sql统计 -->
		<property name="filters" value="stat" />
    </bean>  
     <!-- 主数据源-->  
    <bean id="masterDataSource" parent="parentDataSource">  
        <property name="driverClass" value="${master.jdbc.driverClassName}" />  
        <property name="jdbcUrl" value="${master.jdbc.url}" />  
        <property name="user" value="${master.jdbc.username}" />  
        <property name="password" value="${master.jdbc.password}" />  
    </bean>  
    <!-- 从数据源-->  
    <bean id="slaveDataSource" parent="parentDataSource">  
        <property name="driverClass" value="${slave.jdbc.driverClassName}" />  
        <property name="jdbcUrl" value="${slave.jdbc.url}" />  
        <property name="user" value="${slave.jdbc.username}" />  
        <property name="password" value="${slave.jdbc.password}" />  
    </bean>  
  
    <bean id="dataSource" class="com.company.datasource.DynamicDataSource">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry key="slave" value-ref="slaveDataSource" />  
            </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="masterDataSource" />  
    </bean>  
  
    <!-- 配置sessionFactory -->  
    <bean id="sessionFactory"  
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="packagesToScan" value="cn.com.company.entity" />  
        <property name="hibernateProperties">  
           <props>
				<!-- 数据库方言配置 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 自动创建|更新|验证数据库表结构 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 输入执行的sql语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<!-- 格式化sql语句 -->
				<!-- <prop key="hibernate.format_sql">true</prop> -->
			</props>
        </property> 
        <property name="packagesToScan">
			<list>
				<value>com.table.*.entity</value>
			</list>
		</property> 
    </bean>  
      
    <!-- 切换数据源 -->  
    <bean id="dataSourceAdvice" class="com.base.database.DataSourceAdvice" />  
    <aop:config>  
        <aop:advisor  
            pointcut="execution(* com.table.*.service.impl.*.*(..))"  
            advice-ref="dataSourceAdvice" />  
    </aop:config>  
    
    <!-- 扫描除了控制器外的其他注解 -->
	<context:component-scan base-package="com.*">
		<context:exclude-filter type="regex"
			expression=".*controller$" />
	</context:component-scan>

    <!-- 扫描除了控制器外的其他注解 -->
	<context:component-scan base-package="web.*">
		<context:exclude-filter type="regex"
			expression=".*controller$" />
	</context:component-scan>
      
    <!-- 配置事务管理器 -->  
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory">  
            <ref bean="sessionFactory" />  
        </property>  
    </bean>  
    <!--配置事务的传播特性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!-- 对增、删、改方法进行事务支持 -->  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="create*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <!-- 对查找方法进行只读事务 -->  
            <tx:method name="loadByUsername*" propagation="SUPPORTS" read-only="true" />  
            <!-- 对其它方法进行只读事务 -->  
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
    <!--那些类的哪些方法参与事务 -->  
    <aop:config>  
        <aop:advisor  
            pointcut="execution(* com.table.*.service.impl.*.*(..))"  
            advice-ref="txAdvice" />  
    </aop:config>  
    
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>
      
</beans>  